C O M P I L E R   G Y A A N

gcc code.c -o [name that you want to give] // to give the compiled file a name other than the code file name (here, zero.exe)

---------------------------------------
gcc -Wall -save-temps zero.c // To see all the files which gets generated during the compilation of the code WHICH ARE:
.i for preprocessed code, 
.s for assembly code,
.o for (final) binary file which the computer understands

---------------------------------------
Note: The -[command] are known as flags of gcc

---------------------------------------
There are 4 steps process done when a code is compiled
	STEP 1: Preprocessing = the compiler removes all the comments from the code and includes all code from the libraries which we have mentioned

	STEP 2: Compilation = then the preprocessed code is run with fix memory allocated

	STEP 3: Assembly = then the code gets converted into assembly lang

	STEP 4: Linking = all files are linked together to generate an executable(.exe) file
---------------------------------------
FFLUSH(STDIN);
The fflush(stdin); clears the previous input
void zoop() // in order to flush the previous input (healthier alternative of fflush(stdin))
{
    int c;
    while ((c = getchar()) != '\n' && c != EOF)
    {
    }
}
-------------------------------------------------
PREPROCESSORS IN C
#include "code.c" // this is how to include other file's code into another code, like npm in JS
#define PI 3.14 // this is called a macro, aka, the define directive
#define SQUARE(r) r*r // this means whenever there will be SQUARE(r) written, it'll be replaced by r*r
#undef // it makes macro undefined
#pragma // to issue some advanced/special commands to the compiler
#ifdef // if a macro is defined, it returns true(1)
#ifndef // if a macro isn't defined, it returns true

PREPROCESSOR DIRECTIVES
printf("The file name is %s\n", __FILE__);               // To print the file name
    printf("Today's date is %s\n", __DATE__);                // To print the date
    printf("The time is %s\n", __TIME__);                    // To print the time
    printf("Compiled with ANSI Standards?: %d\n", __STDC__); // To check if your code is compiled using ANSI Standards, 1 if yes, 0 if no

#ifdef DATE // if date is defined, than only go in this, otherwise don't
    printf("%s", __DATE__);
#endif

#ifndef TIME // if time is NOT defined, than only go in this, otherwise don't
    printf("%s", __TIME__);
#endif
-------------------------------------------------------------
\0 - null character
- a separate character string is stored as char str[] = {'j','e','e','l','\0'}
- a whole string is stored as char str[] = "jeel";

----------
Printing Address of each character in a string
----------

char arr[] = {"jeel"};
    // scanf("%s", arr);
    for (int i = 0; i < sizeof(arr); i++)
    {
        printf("Address of %c is %u\n", arr[i], &arr[i]);
}

Out: 
Address of j is 1520434199
Address of e is 1520434200
Address of e is 1520434201
Address of l is 1520434202
Address of   is 1520434203 (this is null(\0) character)

------------
dynamiC Memory Allocation - malloc, contiguos allocation - calloc
------------
int *ptr;
ptr = malloc(6*4); // I want 6 integers with 4 byte capacity, but to improve the accessibility of the program, we would use 'sizeof(int)' instead of 4 so that lower and higher end PCs with more bytes can also work seamlessly

------------
ptr = (int*) malloc(30*sizeof(int)); // (int*) here is typecasting, as the malloc function returns void, we've to convert it into integer(or the datatype that you want) -- we can use ptr afterwards as an array, and it will continue allocating memory dynamically
------------

ptr = (float*) calloc(6, sizeof(float)); // allocates contiguos space in memory. It allocates on the spot, and not dynamically, hence when printed a variable without storing any data, it will show 0

// Difference between malloc and calloc is that malloc initializes our memory with garbage values and calloc initializes with 0

-------------------------------------------------------
	COMMAND LINE ARGUMENTS

***************************ARGC & ARGV*************************
int main(int argc, char const *argv[]); // here, argc is the first argument when giving input in the main() function, and argv is an array in which every command is stored, and it has atleast one command, which is the file name(i.e. zero.exe)

{
	printf("argc: %d", argc); // this will print 3 if the command in the terminal is something like this = = ./zero.exe jeel patel, the 1st being its file name, and the both strings as separate arguments
}

another example: 
// printing all the arguments that are stored in argv[] array

for(int i=0; i<argc; i++){
	printf("argument:%d, value: %s", i, argv[i]); // the code needs to be saved and executed before inputting "./zero.exe jeel patel" in the terminal
}

Note: argv[] always have the file address in its index[0]

Output:
argument: 0, value: C:\Users\JEEL\Desktop\C-Programs\FullCWHCourse\zero.exe
argument: 1, value: jeel
argument: 2, value: patel

IN ORDER TO UNDERGO ARITHMETIC INSTRUCTIONS, WE NEED TO CONVERT THE ARGUMENTS INTO INT(which are integers with double-quotes!)
printf("%d\n", (atoi(argv[1])) + (atoi(argv[2])));

---------------------------------------------------