POINTERS
Pointer variables are used to store an address of a variable,
i.e. - Suppose my variable is jediMaster, and I want to know its address at which is located in my pc, I'll print with the %p placeholder and write &jediMaster after the comma! But if I want to store it into an another variable I'll do the below!

    int var;
    int *pointer;

    pointer = &var; // This store the address of var in 'pointer' variable
    value = *pointer // But this will store the 'pointer' variable's value to the 'value' variable

    printf("%p\n", &var);
    printf("%p", pointer);
---------------------------------
VOID POINTER
Void Pointers is like a general container, which you can use for any purpose
- It can be typecasted into any variable datatype
- You can't dereference it through our traditional pointer dereferencing way! You need to first typecast the void pointer into the datatype of which the data is on the address location, so, if you don't know the datatype of variable stored, you won't be able to dereference it/get the value stored in it
i.e.
    int y = 7;
    float z = 1.3;
    void *ptr;
    ptr = &y;
    printf("%d", *((int *)ptr));
    ptr = &z; // we can use void pointer like this, to store and display two kinds of data, that's why it is known as 'general purpose' pointer
    printf("%f", *((float *)ptr));
---------------------------------
ANOTHER ONE
int a = 76;
int *ptra = &a;

%p , &ptra // ptra ek esa variable hai jiske andar to ek variable ka address hai hi, but &ptra uska khudka address hai
%p , &a // ye a ka address hai
%p , ptra // a ka address to maine ptra mein store kiya tha, so instead of &a, we can also write ptra only
%d , *ptra // ye print krta hai vo value jo ki vo address me hai jo address ptra me stored hai(here, a ki value)
%d , a // ye bhi a ki value print krega, so instead of *ptra, we can write this!


int arr[] = {0,1,2};
%d, arr+1; // This will print the address of second element of the array, not value, not address of first element
%d, *(arr+1) // This will print the value of second element; This and below statement prints the same
%d, *(&arr[1]); // This is called value dereferencing
%d, arr[1]; // our traditional way to print value of an array element


here, [int arr[] = {0,1,2};] is a constant, and you cannot change its address or perform arithmetic ops on it like arr++/a--.
but, you can assign and change value of it like this: int *arrPtr = arr; - - This assigns the original addresses of arr to the *arrPtr and hence we can manipulate those addresses and its values, quite complex!
----------------------------------

TO DEFINE TYPEDEF VARIABLE WHICH WILL MAKE EVERY VARIABLE A POINTER

int *a,b; // this will make the 'a' varible a pointer, and 'b' a normal int variable, but if we want to make every variable declared to be a pointer, 			then,
typedef int* intPtr;
intPtr a,b; // this will make every variable a pointer without inserting an asterisk
----------

To get the address of a variable = *a
To get the variable/constant stored inside an address = *(&a)

int *j; // This means that 'j' is going to be used to store integer addresses,
vice versa for other variable types

int i = 12, *j = &i; // *j stores the variable stored in i
printf("value of i = %d\n", i); // 12
printf("value of j = %d", *j); // 12

----------------------------------------------------------

As j is used to store the address of i, we can use k to store the address of j, like this:
int **k;
r = &j;
we can go on and on by adding asterisks like above. as every address storing variable would obviously have their own address too!

----------------------------------------------------------

Reference by Value
void swap(int *a, int *b);

void main()
{
    int a = 3, b = 4;
    printf("value of a and b before swap: %d %d\n", a, b);
    swap(&a, &b);
    printf("value of a and b after swap: %d %d\n", a, b);
}

void swap(int *a, int *b)
{
    int temp;
    temp = *a;
    *a = *b;
    *b = temp;
}

----------
----------

*avg = (float)*sum / 2; // this means that the result should be typecasted to float data type

----------------------------------------------------------

POINTER ARITHMETIC

int a, *p = &a;
printf("original address of a: %u\n", p);
p++; // Increases the address by 4 bytes(only in integer and float), whereas it'll only plusplus by 1(1 byte) if 'p' would be char datatype | This'll only change the address that is copied in 'p' and not the original address of a
printf("plusplused address of a: %u, original address of a: %u\n", p, &a);

--------------------------------------------------------------------
V E R Y IMPORTANT ! ! ! - - CALL BY VALUE/REFERENCE
----------

FUNCTIONS IN C
in functions, the parameters passed from the main() function are called 'actual parameters' and when there is a copy made of those actual parameters in the function, they're known as formal parameters

CALL BY VALUE/REFERENCE
1. When a value is passed as actual and formal parameters, it is called Call By Value
2. When ann address is passed to a function as a parameter, it is known as Call By Reference
	i.e. - in main() - funct(&variable); // I'm sending this variable's address to the function as a parameter
		in whateverFunction(int *variable){ } // I'm receiving the address of the passed variable

Note: Functions wouldn't be able to change the value of a parameter through call by value, but it can change through call by reference, cause it has the address of it!

BEST EXAMPLE: When a smart contract is written on the blockchain, it gets distributed on each and every server working, and if you change one of those smart contract, you won't be able to change them all, but if you change the smart contract as a sudo user/root user/administrator, It will be a disaster!!!

SIMPLE CALL BY REFERENCE EXAMPLE (only variable, not array)
i.e. int func(int *ptr){
	*(ptr) will give me the value of the very first element in the array!   
	*(ptr+1); // this is called dereferencing, through which we'll get the second element of the array(ptr+1 = 2nd element)
likewise,  *(ptr+2) will give me the value of the third element

void changeValue(int *address){
	*address = 47;
}

int main(){
	int a = 34;
	changeValue(&a); // now it's value would be 47
}

 --- By declaring array as a parameter in the function ---

in main():
	int product = func(arr); // this is how array is passed to a function

in function():
	int func(int arr[]){for(int i; i<4; i++) 
	{
	"%d", arr[i]; // to iterate all elements
	}
} // If you change the value of any array element, it'll be reflected in original value


SIMPLE CALL BY REFERENCE EXAMPLE (array) --- By passing array's base address to the function ---

Just name of the array (for i.e. arr[10]) has the address of its first element in the name of it(here, arr)
i.e.
in function():
	void func(int *ptr){
	{
		for(int i; i<4; i++) 
	{
		"%d", arr[i]; // to iterate all elements // you can also write *(ptr+i) instead of arr[i]
	}
}

in main():
	avg = func(arr); // this only passes the address of the first element, then we can change values of all elements by incrementing the address by 1!!! HOW FUCKING AWESOME IS THAT!

---------------------------------------------------
'*ptr = "JEEL"' is equivalent to 'ptr[] = "JEEL";'
----------
ptr[] initilization method won't allow you to change the content on the existing address
BUT
'*ptr' will allow you to do this!

---------------------------------------------------
POINTER TYPES

Void Pointer is a general purpose pointer(which is like a general purpose container, which can be use to store anything from detergent to food, etc. and not limited to only one purpose). It can be transformed to any variable datatype

Null Pointer is a way to make a pointer variable be NULL(0) so that no-one can dereference it. It will make the pointer variable point no longer to a garbage value, hence you'll have one less possibility of an error
i.e. Null pointer can be checked if it is null and then use it, but if null pointer isn't made null beforehand, it can cause troubles inside your program
another i.e. - You will want to store in a pointer only if it isn't NULL(because you've made it null), so that you don't continue your program taking a garbage value instead(illustration below)
-> 
int a = 3;
int *ptr = &a;
if(ptr != NULL)  // checks if the pointer is null or not to avoid troubles caused later in the code
	printf("The address of a is %d", *ptr);
else{
	printf("The pointer is a null pointer and can't be dereferenced");
}

Dangling Pointer - The pointer which is pointing to the variable which is deleted or deallocated now 
Wild Pointer - Uninitialized pointer variable is called wild pointer,
i.e.
int a;
int *ptr;
ptr = &a; // ptr is not a wild pointer anymore

------------------------------------------------
------------------------------------------------

THE POINTERS WHICH POINT TO A FUNCTION 'AKA' FUNCTION POINTERS

Note: Unlike normal pointers, we do not allocate/de-allocate memory using function pointers
i.e.
int sum(int a, int b)
{
    return a + b;
}
int main()
{
    int (*fPtr)(int, int); // point to a function which takes 2 integers as parameters and returns int as well
    fPtr = &sum;           // now, store the address where sum function is located, you can avoid '&' before 'sum'
    int d = (*fPtr)(4, 6); // the (*fPtr) would be replaced with sum and will fetch function outcome. This is also known as 'Dereferencing a function pointer'
    printf("%d", d);
    return 0;
}
---------------------------------------------------------------
POINTER TO POINTER

int a = 12;
    int *b = &a;
    int **c = &b;
    int ***d = &c;

    printf("%u\t %u\t %u\t %u\t", a, b, c, d);
---------------------------------------------------------------
MAKING POINTER VARIABLES IN STRUCT
----------

struct employee e1;
struct employee *ptr;

ptr = &e1;
(*ptr).code = 101; // you can also write ptr->code = 101;
---------------------------------------------------------------
dynamiC (Memory Allocation - malloc)(contiguos allocation - calloc)
------------
int *ptr;
ptr = malloc(6*4); // I want 6 integers with 4 byte capacity, but to improve the accessibility of the program, we would use 'sizeof(int)' instead of 4 so that lower and higher end PCs with more bytes can also work seamlessly

------------
ptr = (int*) malloc(30*sizeof(int)); // (int*) here is typecasting, as the malloc function returns void, we've to convert it into integer(or the datatype that you want) -- we can use ptr afterwards as an array, and it will continue allocating memory dynamically
------------

ptr = (float*) calloc(6, sizeof(float)); // allocates contiguos space in memory. It allocates on the spot, and not dynamically, hence when printed a variable without storing any data, it will show 0

// Difference between malloc and calloc is that malloc initializes our memory with garbage values and calloc initializes with 0