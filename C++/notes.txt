/ *** DATATYPES IN C++ *** /
    string name = "harry";
    // int -> short (for short integers)
    int a = 2;
    int b = 3;
    short aVarWithShortMemoryAllocated;
    float aFloatWhichIsConstant = 45.32;
    // for declaring constant variables
    float const aFloatWhichIsConstant = 45.32;
    // float -> double (for long floats)
    double score2 = 45.322;

    // for longer integers
    long aVarWithLongMemoryAllocated;
    long long aVarWithVeryLongMemoryAllocated;
    long double score3 = 45.332;
    // << is known as 'insertion operator'
    cout << "Enter your name:" << endl;

    // Capturing input and storing into a variable
    // >> is called 'Extraction Operator'
    cin >> name;

    // Displaying a variable value; similarly for executing functions too instead of variables
    cout << "Hello " << name << " It's great to meet you!";

    // New line character in C++
    // endl or \n

    // Typecasting
    cout << "a / b is " << (float)a / b << endl;

/ *** Modules in C++ *** /
Like the modules in JS, we have modules in C++ which have the extension of .h and which can be included as other headers
i.e.
    #include "printTable.h"
    .
    .
    printTable(10);

(inside printTable.h)

#include <iostream>
using namespace std;

// 1 is the default value for num here
int printTable(int num=1)
{
    for (int i = 1; i < 11; i++)
    {
        cout << num << " X " << i << " = " << num * i << endl;
    }
}

/ *** GET THE GLOBAL VARIABLE *** /
int c = 1;
int main()
{
    int c = 2;
    cout << c;
    // This means print the global 'c' variable's value
    cout << ::c;
}

/ *** REFERENCE VARIABLES *** /
    int c = 2;
    // This means that b is referencing c's value
    int &b = c;
    cout << b << c; // 22
    // If you change the b, it'll also change c
    b = 3;
    cout << b << c; // 33

/ *** TYPECASTING *** /
    int a = 3;
    float b = 1.2001;
    cout << (float)a; // this is equivalent to float(a)
    cout << (int)b;

/ *** CONSTANTS *** /
    // You can write like both
    const int a = 3;
    int const a = 3;

/ *** MANIPULATORS *** /
1. endl - For moving the following code to a new line
2. setw(4) - This will align any character right which is going to be printed after this function, and will set its width to 4 characters(in this context). NOTE: You need to include <iomanip> library to use this func
i.e.
    int a = 12;
    cout << "a's value is " << setw(10) << a; // a's value is         12

/ *** POINTERS *** /
int a = 12;
    int *b = &a;
    // Pointer which points to the address of a pointer
    int **c = &b;
    cout << a << endl; // prints the actual value
    cout << b << endl; // prints the address of the actual value
    cout << c << endl; // prints the address of the pointer variable, which is storing the address of the actual value

/ *** Accessing array elements with just the first element's address *** /
    int a[] = {0, 1, 2};
    int *b = a;
    cout << b << endl;
    cout << ++b << endl;
    cout << ++b << endl;

/ *** Struct *** /
struct car
{
    int id;
    string modelName;
    string brand;
    float mileage;
    void introduce()
    {
        cout << "Hello, this is " << this->brand << " " << this->modelName << ", and I have a stunning mileage of " << this->mileage << " kmpl.";
    }
};

    struct car dreamCar1;
    dreamCar1.modelName = "Carens";
    dreamCar1.brand = "Kia";
    dreamCar1.mileage = 67.55;

    // Short hand to do just this
    dreamCar1 = {1, "Carens", "Kia", 67.55};


/ *** ALIAS IN struct *** /
typedef struct car
{
    int id;
    string modelName;
    string brand;
    float mileage;
    void introduce()
    {
        cout << "Hello, this is " << this->brand << " " << this->modelName << ", and I have a stunning mileage of " << this->mileage << " kmpl.";
    }
} automobile;

// Now, we can create structs like this:
    automobile dreamCar1;
// instead of writing the whole:
    struct car dreamCar1;

/ *** FUNCTIONS AND FUNCTION PROTOTYPES *** /

int sum(int a, int b);

// You can also just write like below, but only for prototype!
int sum(int, int);

int main() { cout << sum(1, 2); }

int sum(int a, int b) { return a + b; }


/ *** CALL BY REFERENCE *** /

void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Swapping variables with Call by reference using pointers
int main()
{
    int a = 6, b = 7;
    cout << a << b << endl;
    cout << a << b << endl;
    return 1;
}

// Swapping variables with reference variables
void swap(int &a, int &b)
{
    int temp = a;
    a = b;
    b = temp;
}

int main()
{
    int a = 6, b = 7;
    cout << a << b << endl;
    swap(a, b);
    cout << a << b << endl;
    return 1;
}

/ *** STATIC *** /

int pro()
{
    // This only stores the value once; next time, the value will stay incremented
    static int a = 0;
    return ++a;
}

int main()
{
    cout << pro(); // 1
    cout << pro(); // 2
    cout << pro(); // 3
    return 1;
}

/ *** RECURSION & FIBONACCI/FACTORIAL *** /

int fib(int num)
{
    if (num < 2)
        return num;
    return fib(num - 2) + fib(num - 1);
}

int factorial(int num)
{
    if (num == 1)
        return 1;
    return num = num * factorial(num - 1);
}

int main()
{
    cout << factorial(15);
    cout << fib(10);
    return 1;
}

/ ***FUNCTION OVERLOADING *** /
// The program first matches the parameter datatypes and their count, and then proceeds, the code will work totally fine even if there are more than one functions with the same name!

string add(string a, string b)
{
    return a + b;
}
int add(int a, int b, int c)
{
    return a + b + c;
}

int main()
{
    cout << add("Jeel ", "Patel") << endl;
    cout << add(1, 2, 3) << endl;
    return 1;
}

/ *** OBJECT ORIENTED PROGRAMMINGðŸ¤© *** /

class Car
{
private:
    // These can only be accessed by functions inside this scope
    int srNo, initialPrice;
    string ownerName;

public:
    // These can be accessed by outer functions
    string model, brand;
    void buyCar(string model, string brand)
    {
        this->model = model;
        this->brand = brand;
    }
    void setOwner(string name); // this is just declaration, we can define it later
    void info()
    {
        cout << "This is " << this->model << " from " << this->brand << ", and it is owned by " << this->ownerName << "." << endl;
    }
};

// This is how we can define an inner function of a class outside the class
:: is known as 'Scope Resolution Operator'
void Car ::setOwner(string name)
{
    this->ownerName = name;
}

main()
{
    // To count how many car objects are made with this class, you can use 'static' variables which are associated with the class and not the object, and it'll not be allocated for every object which is created and will be shared by all the created objects; i.e. static int count; // by default it starts with 0
    Car chevy;
    // This both below lines will not work as the variable 'ownerName' is not even read only, no one can either read or write it except its own parent class!
    chevy.ownerName = "Paresh";
    cout << chevy.ownerName;
    return 1;
}

/ *** OOPs - Classes and objects *** /

class --> extension of structures (in C)
structures had limitations
     - members are public
     - No methods
classes --> structures + more
classes --> can have methods and properties
classes --> can make few members as private & few as public
structures in C++ are typedefed

/ *** VERY MINI-PROJECT MULTIUTILITY using OOP *** /

/ *** STATIC FUNCTIONS *** /
Which basically accesses static variables, it cannot print variables except static variables

// This is how you can utilise it
*inside class*
static void getCount(){
    cout << count;
}
*inside main*
[ClassName]::getCount();


/ *** FRIEND FUNCTIONS *** /
They're nothing but the permission given by the main class to some function in order to execute some task outside the class to access the private variables and functions

SIMPLEST EXAMPLE OF FRIEND FUNCTIONS:
// This is known as Forward declaration; it is the assurity given by us to the compiler that even if there isn't a class Y, it will come up later in the code!
class Y;

class X
{
    int num = 7;
    // This is the permission statement, which basically means that if add() function is trying to access my private data, allow it to do that
    friend void add(X, Y);
    // If we want to friend a whole class, then just write the class name like below:
    class someClass;
};

class Y
{
    int num = 7;
    friend void add(X, Y);
};

void add(X one, Y two)
{
    cout << one.num + two.num;
}

int main()
{
    X a;
    Y b;
    add(a, b);
    return 1;
}

/ *** CONSTRUCTORS *** /
-> It can have default arguments like functions,
-> It can also work like function overloading, if there are more than one constructor in the class, the compiler will match its arguments and proceed accordingly

class Car
{
public:
    string name, brand;
    float mileage;
    // The constructor; which is invoked automatically whenever an object is created from this class
    // This forward declaration still needs to be here if you want to use the 2nd method to define constructor
    // If you want to keep this format, you must also specify a default constructor so that whenever you inherit some other class from this class, it'll call the default constructor. i.e. Car(){}; // this is a default constructor with no args and statements
    Car(string name, string brand, float mileage);
    void intro()
    {
        cout << "This is stunning " << this->brand << " " << this->name << " with a fantastic mileage of " << this->mileage << " kmpl." << endl;
    };
    // {
    //     this->name = name;
    //     this->brand = brand;
    //     this->mileage = mileage;
    // }
};

// Another way to define constructors; if you've any parameters in the constructor, then it is called parameterized constructor.
Car::Car(string name, string brand, float mileage)
{
    this->name = name;
    this->brand = brand;
    this->mileage = mileage;
}

int main()
{
    Car car1("Fantazma", "Lamborghini", 97.9);
    car1.intro();
    return 1;
}

/ *** DESTRUCTORS *** /
class num
{
public:
    void someFuncs()
    {
        cout << "count called!";
    }
    num()
    {
        cout << "constructor called!" << endl;
    }
    //  This is called 'Destructor', which basically is used to destruct the memory allocated to the class
    ~num()
    {
        cout << "destructor called!" << endl;
    }
};

int main()
{
    // Whenever an object is created from the class 'num', the constructor will be called and it'll print "constructor called!", but as the program will exit the below {} block, it'll destruct the object and the destructor will be called!
    {
        num n1;
    }

    return 1;
}


/ *** INHERITANCE *** /
/*
Types of INHERITANCE:
1. Single Inheritance
2. Multilevel Inheritance
3. Multiline Inheritance
4. Hierarchical Inheritance
5. Hybrid Inheritance
*/
/*
 syntax
 class {{derived_class}} : {{visibility_mode}} {{base_class}}
 {
     class members/methods, etc...
 }
---------------------------- 
                            Public Mode      	    Private Mode    	  Protected Mode
Private members            Not Inherited            Not Inherited         Not Inherited              
Protected members           Protected                 Private              	Protected                    
Public members               Public                   Private               Protected       

 Visibility mode in inheritance: [note: it is private by-default]
 IF YOU KEEP IT PUBLIC: the members of your base_class will be public in the derived class too;
 IF YOU KEEP IT PRIVATE: your base_class's public members will be private in your derived class and the already private members of your base_class will NOT be inherited.
*/

class Employee
{
    // if I rename this to private, it'll NOT inherit to any class regarless of the visibility mode in the derived class
public:
    int someVar = 7;
};

class Programmer : public Employee
{
    // now the 'someVar' variable is inherited inside this!
};

int main()
{
    // write an example of inheritance demonstrating both inheritance as well as both visibility modes
    Programmer Jeel;
    cout << Jeel.someVar;
    return 1;
}

/ *** PROTECTED IN INHERITANCE *** /
class Base
{
    // Protected space is where you can declare members and methods which are inherited but works as private
protected:
    int privateButInherits = 7;
};

// Now you can inherit your base_class using 'protected' visibility mode and not making it accessible to others!
class Derived : protected Base
{
};

int main()
{
    Derived Jeel;
    cout << Jeel.privateButInherits; // will throw error!

/ *** Multilevel Inheritance *** /
class Base{};
class Derived1 : public Base{};
class Derived2 : public Derived1{};

/ *** Multiple Inheritance *** /
class Base1{};
class Base2{};
class Derived : private Base1, protected Base2{};

/ *** AMBIGUITY IN INHERITANCE *** /

// This is an ambiguous situation in which there are two clashing same name members/methods while performing multiple inheritance; This can be prevented by specifying which member/method to use, in the derived class, like as illustrated below!
class Base1
{
public:
    void greet()
    {
        cout << "Namaste!";
    }
};
class Base2
{
public:
    void greet()
    {
        cout << "Bonjour!";
    }
};

class Derived : public Base1, public Base2
{
public:
    // IF this would not have defined, than it'd use the greet() from its base class
    void greet()
    {

        Base1 ::greet();
    }
};

int main()
{
    Derived jeel;
    jeel.greet();
    return 1;
}

*** Virtual Base Class <-> Prevents ambiguity, in multilevel inheritance ***
class VirtualBase{
    public:
        void greet() { cout << "Hey Jeel!"; }
};
class Derived1_1 : virtual public VirtualBase{};
class Derived1_2 : virtual public VirtualBase{};
class Derived2 : public Derived1_1, public Derived1_2{};

int main()
{
    // This will not throw an error as we've made the base class, a virtual base class, hence it'd prevent the ambiguity by itself under the hood!
    Derived2 jeel;
    jeel.greet();
    return 1;
}

/ *** EXAMPLE ---- Multiple Inheritance *** /
class SimpleCalc
{
    int a, b;

public:
    void takeInSimple()
    {
        cout << "Enter value of a:" << endl;
        cin >> a;
        cout << "Enter value of b:" << endl;
        cin >> b;
        putOutSimple();
    }
    void putOutSimple()
    {
        cout << a << " + " << b << " = " << a + b << endl;
        cout << a << " - " << b << " = " << a - b << endl;
        cout << a << " * " << b << " = " << a * b << endl;
        cout << a << " / " << b << " = " << a / b << endl;
    }
};

class SciCalc
{
    int a, b;

public:
    void takeInSci()
    {
        cout << "Enter value of a:" << endl;
        cin >> a;
        cout << "Enter value of b:" << endl;
        cin >> b;
        putOutSci();
    }
    void putOutSci()
    {
        cout << "sin of a is " << sin(a) << endl;
        cout << "cos of a is " << cos(a) << endl;
        cout << "exp of a is " << exp(a) << endl;
        cout << "tan of a is " << tan(a) << endl;
    }
};
 
class HybridCalc : public SimpleCalc, public SciCalc
{
};

int main()
{
    HybridCalc inst;
    inst.takeInSimple();
    inst.takeInSci();
    return 1;
}

/ *** ORDER OF CONSTRUCTOR EXECUTION in INHERITANCE *** /

/*
Case1:
class B: public A{
   // Order of execution of constructor -> first A() then B()
};

Case2:
class A: public B, public C{
    // Order of execution of constructor -> B() then C() and A()
};

Case3:
class A: public B, virtual public C{
    // Order of execution of constructor -> C() then B() and A()
};

*/

/* *** Initialization list in constructors *** */
class some
{
    int a, b;

public:
    // This is a syntax through which a and b can be given values via constructor 
    some(int c, int d) : a(c), b(d)
    {
        cout << a << " " << b << endl;
    }
};

int main()
{
    some thing(1, 2);
    return 1;
}

/* *** new and delete KEYWORDS IN C++ *** */

int main()
{
    // Dynamically allocating memory to variables and arrays with 'new' keyword; the below 'p' will store the address of the memory, as it uses value by reference
    int *p = new int(5);
    int *arr = new int[5];
    arr[0] = 1;
    arr[1] = 2;
    arr[2] = 3;
    cout << p << endl;
    // To get the addresses of the array elements, you need to mention & before the element specifier
    cout << arr[0] << endl;
    cout << arr[1] << endl;
    cout << arr[2] << endl;
    // Deleting the dynamically allocated memory with 'delete' keyword
    delete[] arr;
    return 1;
}

/* *** this in C++ *** */

#include <iostream>
#include <string>
using namespace std;

class A
{
    int a;

public:
    void setData(int a)
    {
        this->a = a;
    }
    void getData()
    {
        cout << a;
    }
};

int main()
{
    A a;
    a.setData(12);
    a.getData();
    return 1;
}

/* *** POLYMORPHISM *** */
 1. Compile-time Polymorphism - Early Binding
     1.1 Function Overloading
     1.2 Operator Overloading
 2. Run-time Polymorphism - Late Binding
     2.1 Virtual Functions


/* *** THREE WAYS to capture a string with spaces *** */

// First Way
    string str;
    getline(cin, str);
    cout << str;
// Second Way  
    char namec[10];
    gets(namec);
    cout << namec;
// Third Way
    char name[20];
    cin.getline(name, 20);
    cout << name;

/* *** FILES I/O *** */
/* Useful classes to work with file in 'fstream' library
1. fstreambase
2. ifstream --> derived from fstreambase
3. ofstream --> derived from fstreambase

To work with files in C++, you'll first open it;
There are primarily 2 ways to open a file:
    1. Using the constructor
    2. Using the function open()
*/

// 1. Opening with a constructor & writing in that file    
ofstream out("hello.txt");
out << "Something else!";

// 1. Opening with a constructor & reading that file [you need to store the content somewhere first to see it]
string someth;
ifstream {{anything}}("hello.txt");
    // to get content w/o whitespaces
        {{anything}} >> someth;
    // to get content along w/ whitespaces
        getline({{anything}}, someth);
cout << someth;

// 2. Opening with the open() function of fstreambase
    ofstream out;
    out.open("hello.txt");
    out << "Helloooooooo!";

// EOF() ---- END OF FILE
    string content;
    ifstream read;
    read.open("notes.txt");
    // With the traditional cin or getline, you'd be able to get a word or a sentence, but if you want to read the whole file's content, you need to use eof(), which means end of file; The below condition in the while loop simply means that if the file's end is not there, continue printing the sentences one by one
    while (read.eof() == 0)
    {
        getline(read, content);
        cout << content << endl;
    }
    read.close();

// This closes the file and frees up the memory allocated to it
    file.close();

    
/* *** C++ TEMPLATES *** */

// You can have multiple parameters too, like below:
template <class dataType1, class dataType2>
template <class dataType>
class Calc
{
public:
    dataType a, b;
    // for multiple param
    dataType1 a;
    dataType2 b;
    void setData()
    {
        cout << "Enter first value: ";
        cin >> a;
        cout << "Enter second value: ";
        cin >> b;
        getData();
    }
    void getData()
    {
        cout << a << " + " << b << " = " << a + b << endl;
        cout << a << " - " << b << " = " << a - b << endl;
        cout << a << " * " << b << " = " << a * b << endl;
        cout << a << " / " << b << " = " << a / b << endl;
    }
};

int main()
{
    // You can enter here anyy datatype according to your function's needs
    Calc<int> instance;
    instance.setData();
    return 0;
}

CWH EXAMPLE OF Templte with Multiple Parameters
// Also, this is how to set default parameters
    template<class T1, class T2=float>
    class myClass{
        public:
            T1 data1;
            T2 data2;
            myClass(T1 a,T2 b){
                data1 = a;
                data2 = b;
            }
        void display(){
            cout<<this->data1<<" "<<this->data2;
        }
    };

    int main()
    {
        myClass<int, char> obj(1, 'c');
        obj.display();
    }

/* *** FUNCTION TEMPLATES *** */

template <class T1, class T2>
void funcAverage(T1 a, T2 b)
{
    cout << (a + b) / 2.0;
}

int main()
{
    funcAverage(5.2, 2.5);
    return 1;
}